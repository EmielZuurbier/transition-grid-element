(()=>{const timing_debounce=(t,e,i=!1)=>{let s;return(...n)=>{const r=i&&!s;clearTimeout(s),s=window.setTimeout((()=>{s=null,i||t(...n)}),e),r&&t(...n)}},distance_delta=(t,e)=>({x:t.left-e.left,y:t.top-e.top,width:e.width-t.width,height:e.height-t.height,scaleX:t.width/e.width,cScaleX:e.width/t.width,scaleY:t.height/e.height,cScaleY:e.height/t.height}),relative=(t,e)=>{const{top:i,left:s,width:n,height:r}=e;return{top:i-t.top,left:s-t.left,width:n,height:r}},changed_positions=(t,e)=>!(t.top===e.top&&t.left===e.left&&t.width===e.width&&t.height===e.height),relevant_mutations=t=>t.filter((({attributeName:t,addedNodes:e,removedNodes:i})=>"class"===t||e.length||i.length)).length>0;var t,e,i,s,n,r,a,o,h,l,__classPrivateFieldSet=function(t,e,i){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,i),i},__classPrivateFieldGet=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class TransitionGridElement extends HTMLElement{constructor(){super(...arguments),this.isAnimating=!1,t.set(this,null),e.set(this,new Map),i.set(this,null),s.set(this,null),n.set(this,!1),r.set(this,(()=>{__classPrivateFieldSet(this,t,this.getBoundingClientRect());for(const t of this.items){const i=t.getBoundingClientRect();__classPrivateFieldGet(this,e).set(t,i)}})),a.set(this,timing_debounce((()=>{__classPrivateFieldGet(this,r).call(this)}),100)),o.set(this,(()=>{const calculatePositions=i=>{const s=i.getBoundingClientRect(),n=relative(__classPrivateFieldGet(this,t),s),r=__classPrivateFieldGet(this,e).get(i),a=relative(__classPrivateFieldGet(this,t),r);return __classPrivateFieldGet(this,e).set(i,s),{item:i,currentPosition:n,previousPosition:a}},filterOnlyItemsWithChanges=({currentPosition:t,previousPosition:e})=>changed_positions(t,e),transitionGridItems=({item:t,currentPosition:e,previousPosition:i},s,n)=>new Promise((r=>{const{x:a,y:o,scaleX:h,scaleY:l}=distance_delta(i,e),g=`translate3d(${a}px, ${o}px, 0) scale(${h}, ${l})`;t.style.transform=g,t.style.zIndex=""+(n.length-s);t.animate([{transform:g},{transform:"translate3d(0, 0, 0) scale(1, 1)"}],{duration:this.duration,delay:this.stagger*s,easing:this.easing}).addEventListener("finish",(()=>{requestAnimationFrame((()=>{t.style.transform="",t.style.transformOrigin="",""===t.getAttribute("style")&&t.removeAttribute("style"),r(t)}))}),{once:!0})}));__classPrivateFieldSet(this,i,new MutationObserver((i=>{if(!relevant_mutations(i)||this.isAnimating)return;(t=>{const e=new Event("transitiongridanimationstart");t.dispatchEvent(e)})(this),this.isAnimating=!0,__classPrivateFieldSet(this,t,this.getBoundingClientRect());for(const{addedNodes:s}of i)for(const i of s){const s=i,n=s.getBoundingClientRect(),r=relative(__classPrivateFieldGet(this,t),n),a={left:r.left,top:r.top,width:0,height:0};s.style.transformOrigin="50% 50%",__classPrivateFieldGet(this,e).set(s,a)}const s=this.items.map(calculatePositions).filter(filterOnlyItemsWithChanges).map(transitionGridItems);Promise.all(s).then((t=>{requestAnimationFrame((()=>{__classPrivateFieldGet(this,r).call(this),t.forEach((t=>{t.style.zIndex=""}))})),(t=>{const e=new Event("transitiongridanimationend");t.dispatchEvent(e)})(this),this.isAnimating=!1}))}))),__classPrivateFieldGet(this,i).observe(this,{childList:!0,attributes:!0,subtree:!0,attributeFilter:["class"]}),__classPrivateFieldSet(this,s,new IntersectionObserver((t=>{for(const{isIntersecting:e}of t)!__classPrivateFieldGet(this,n)&&e?__classPrivateFieldGet(this,h).call(this):__classPrivateFieldGet(this,n)&&!e&&__classPrivateFieldGet(this,l).call(this)}),{root:null,rootMargin:"-50px",threshold:[0]})),__classPrivateFieldGet(this,s).observe(this)})),h.set(this,(()=>{window.addEventListener("scroll",__classPrivateFieldGet(this,a)),window.addEventListener("resize",__classPrivateFieldGet(this,a)),__classPrivateFieldSet(this,n,!0)})),l.set(this,(()=>{window.removeEventListener("scroll",__classPrivateFieldGet(this,a)),window.removeEventListener("resize",__classPrivateFieldGet(this,a)),__classPrivateFieldSet(this,n,!1)}))}static get defaultValues(){return{DURATION:250,STAGGER:0,EASING:"cubic-bezier(0.42, 0, 0.12, 0.97)"}}get items(){return Array.from(this.children)}get duration(){return Number(this.getAttribute("duration"))}set duration(t){const e=Number(t);Number.isNaN(e)||this.setAttribute("duration",e.toString())}get stagger(){return Number(this.getAttribute("stagger"))}set stagger(t){const e=Number(t);Number.isNaN(e)||this.setAttribute("stagger",e.toString())}get easing(){return this.getAttribute("easing")}set easing(t){"string"==typeof t?this.setAttribute("easing",t):this.setAttribute("easing","")}connectedCallback(){if(!("animate"in this)||!("MutationObserver"in window))return;const{DURATION:t,STAGGER:e,EASING:i}=TransitionGridElement.defaultValues;null===this.getAttribute("duration")&&(this.duration=t),null===this.getAttribute("stagger")&&(this.stagger=e),null===this.getAttribute("easing")&&(this.easing=i),__classPrivateFieldGet(this,r).call(this),__classPrivateFieldGet(this,o).call(this)}disconnectedCallback(){__classPrivateFieldGet(this,l).call(this)}}t=new WeakMap,e=new WeakMap,i=new WeakMap,s=new WeakMap,n=new WeakMap,r=new WeakMap,a=new WeakMap,o=new WeakMap,h=new WeakMap,l=new WeakMap,customElements.define("transition-grid",TransitionGridElement)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmlkLWFuaW1hdGlvbi8uL3NyYy90aW1pbmcvZGVib3VuY2UudHMiLCJ3ZWJwYWNrOi8vZ3JpZC1hbmltYXRpb24vLi9zcmMvZGlzdGFuY2UvZGVsdGEudHMiLCJ3ZWJwYWNrOi8vZ3JpZC1hbmltYXRpb24vLi9zcmMvZGlzdGFuY2UvcmVsYXRpdmUudHMiLCJ3ZWJwYWNrOi8vZ3JpZC1hbmltYXRpb24vLi9zcmMvZGlzdGFuY2UvY2hhbmdlZC1wb3NpdGlvbnMudHMiLCJ3ZWJwYWNrOi8vZ3JpZC1hbmltYXRpb24vLi9zcmMvY2hlY2tzL3JlbGV2YW50LW11dGF0aW9ucy50cyIsIndlYnBhY2s6Ly9ncmlkLWFuaW1hdGlvbi8uL3NyYy9jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vZ3JpZC1hbmltYXRpb24vLi9zcmMvZXZlbnRzL2dyaWRBbmltYXRpb25FdmVudC50cyIsIndlYnBhY2s6Ly9ncmlkLWFuaW1hdGlvbi8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJjYWxsYmFjayIsIndhaXQiLCJpbW1lZGlhdGUiLCJ0aW1lb3V0IiwiYXJncyIsImNhbGxOb3ciLCJjbGVhclRpbWVvdXQiLCJ3aW5kb3ciLCJzZXRUaW1lb3V0IiwicHJldmlvdXNQb3NpdGlvbiIsImN1cnJlbnRQb3NpdGlvbiIsIngiLCJsZWZ0IiwieSIsInRvcCIsIndpZHRoIiwiaGVpZ2h0Iiwic2NhbGVYIiwiY1NjYWxlWCIsInNjYWxlWSIsImNTY2FsZVkiLCJncmlkQm91bmRpbmdDbGllbnRSZWN0IiwiaXRlbUJvdW5kaW5nQ2xpZW50UmVjdCIsIm11dGF0aW9ucyIsImZpbHRlciIsImF0dHJpYnV0ZU5hbWUiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwibGVuZ3RoIiwiVHJhbnNpdGlvbkdyaWRFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJpc0FuaW1hdGluZyIsIk1hcCIsInRoaXMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpdGVtIiwiaXRlbXMiLCJzZXQiLCJjYWxjdWxhdGVQb3NpdGlvbnMiLCJjdXJyZW50Qm91bmRpbmdDbGllbnRSZWN0IiwicHJldmlvdXNCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXQiLCJmaWx0ZXJPbmx5SXRlbXNXaXRoQ2hhbmdlcyIsInRyYW5zaXRpb25HcmlkSXRlbXMiLCJpbmRleCIsIlByb21pc2UiLCJyZXNvbHZlIiwidHJhbnNmb3JtRnJvbSIsInN0eWxlIiwidHJhbnNmb3JtIiwiekluZGV4IiwiYW5pbWF0ZSIsImR1cmF0aW9uIiwiZGVsYXkiLCJzdGFnZ2VyIiwiZWFzaW5nIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRyYW5zZm9ybU9yaWdpbiIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9uY2UiLCJNdXRhdGlvbk9ic2VydmVyIiwiZXZlbnRUYXJnZXQiLCJldmVudCIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImRpc3BhdGNoVHJhbnNpdGlvbkdyaWRBbmltYXRpb25TdGFydEV2ZW50Iiwibm9kZSIsImVsZW1lbnQiLCJzdGFydFBvc2l0aW9uIiwiYW5pbWF0aW9ucyIsIm1hcCIsImFsbCIsInRoZW4iLCJmb3JFYWNoIiwiZGlzcGF0Y2hUcmFuc2l0aW9uR3JpZEFuaW1hdGlvbkVuZEV2ZW50Iiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsImF0dHJpYnV0ZXMiLCJzdWJ0cmVlIiwiYXR0cmlidXRlRmlsdGVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiaXNJbnRlcnNlY3RpbmciLCJyb290Iiwicm9vdE1hcmdpbiIsInRocmVzaG9sZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJEVVJBVElPTiIsIlNUQUdHRVIiLCJFQVNJTkciLCJBcnJheSIsImZyb20iLCJjaGlsZHJlbiIsIk51bWJlciIsInZhbHVlIiwibnVtYmVyIiwiaXNOYU4iLCJzZXRBdHRyaWJ1dGUiLCJ0b1N0cmluZyIsImRlZmF1bHRWYWx1ZXMiLCJjdXN0b21FbGVt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QU9DLEdBQ2pCRCxPQUFPRyxNQUFNRCxJQUNqQmhFLEtBQUtrRSxhQUFhLFVBQVdGLEVBQU9HLFlBUXRDLGFBQ0MsT0FBT25FLEtBQUswQixhQUFhLFVBRzFCLFdBQVdxQyxHQUNOLGlCQUFvQkEsRUFDdkIvRCxLQUFLa0UsYUFBYSxTQUFVSCxHQUU1Qi9ELEtBQUtrRSxhQUFhLFNBQVUsSUFVOUIsb0JBQ0MsS0FBTSxZQUFhbEUsU0FBVyxxQkFBc0IxQixRQUNuRCxPQU1ELE1BQU0sU0FDTGtGLEVBQVEsUUFDUkMsRUFBTyxPQUNQQyxHQUNHOUQsc0JBQXNCd0UsY0FNWSxPQUFsQ3BFLEtBQUswQixhQUFhLGNBQ3JCMUIsS0FBS21CLFNBQVdxQyxHQU9vQixPQUFqQ3hELEtBQUswQixhQUFhLGFBQ3JCMUIsS0FBS3FCLFFBQVVvQyxHQU9vQixPQUFoQ3pELEtBQUswQixhQUFhLFlBQ3JCMUIsS0FBS3NCLE9BQVNvQyxHQU1mLHVCQUFBMUQsS0FBQSxRQUFBQSxNQUNBLHVCQUFBQSxLQUFBLFFBQUFBLE1BU0QsdUJBQ0MsdUJBQUFBLEtBQUEsUUFBQUEsTyw0SUV6ZkZxRSxlQUFlQyxPQUFPLGtCQUFtQjFFLHdCIiwiZmlsZSI6InRyYW5zaXRpb24tZ3JpZC1lbGVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90IFxuICogYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvciBcbiAqIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICogbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAqIFxuICogQGZ1bmN0aW9uXHRkZWJvdW5jZVxuICogQHBhcmFtICAgXHRjYWxsYmFjayBGdW5jdGlvbiB0byBleGVjdXRlLlxuICogQHBhcmFtICAgXHR3YWl0IFRpbWUgdG8gd2FpdCBiZWZvcmUgZmlyaW5nIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSAgIFx0aW1tZWRpYXRlIEZpcmUgaW1tZWRpYXRlbHkgb3Igbm90LiAob3B0aW9uYWwpXG4gKiBAcmV0dXJuc1x0XHRDbG9zdXJlIGZ1bmN0aW9uLlxuICovXG5jb25zdCBkZWJvdW5jZSA9IChjYWxsYmFjazogRnVuY3Rpb24sIHdhaXQ6IG51bWJlciwgaW1tZWRpYXRlID0gZmFsc2UpID0+IHtcblx0bGV0IHRpbWVvdXQ6IG51bWJlciB8IG51bGw7XG5cdHJldHVybiAoLi4uYXJnczogYW55W10pID0+IHtcblx0XHRjb25zdCBsYXRlciA9ICgpID0+IHtcblx0XHRcdHRpbWVvdXQgPSBudWxsO1xuXHRcdFx0aWYgKCFpbW1lZGlhdGUpIGNhbGxiYWNrKC4uLmFyZ3MpO1xuXHRcdH07XG5cdFx0Y29uc3QgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcblx0XHRpZiAoY2FsbE5vdykgY2FsbGJhY2soLi4uYXJncyk7XG5cdH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkZWJvdW5jZSIsIi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGlzdGFuY2VzIGJldHdlZW4gY29vcmRpbmF0ZXMgYW5kIHNpemVzLlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB4LCB5LCB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXMuXG4gKiBcbiAqIEBwYXJhbSBcdHByZXZpb3VzUG9zaXRpb24gR3JpZFBvc2l0aW9uIG9iamVjdCB3aXRoIHRoZSBwcmV2aW91cyBwb3NpdGlvbi5cbiAqIEBwYXJhbSBcdGN1cnJlbnRQb3NpdGlvbiBHcmlkUG9zaXRpb24gb2JqZWN0IHdpdGggdGhlbiBuZXcgYW5kIGN1cnJlbnQgcG9zaXRpb24uXG4gKiBAcmV0dXJuc1x0T2JqZWN0IHdpdGggeCwgeSwgd2lkdGgsIGhlaWdodCwgc2NhbGVYLCBzY2FsZVkgYW5kIHJldmVyc2VkIHNjYWxlcy4gXG4gKi9cbmNvbnN0IGRlbHRhID0gKHByZXZpb3VzUG9zaXRpb246IEdyaWRQb3NpdGlvbiwgY3VycmVudFBvc2l0aW9uOiBHcmlkUG9zaXRpb24pOiBEZWx0YU9iamVjdCA9PiAoe1xuXHR4OiBwcmV2aW91c1Bvc2l0aW9uLmxlZnQgLSBjdXJyZW50UG9zaXRpb24ubGVmdCxcblx0eTogcHJldmlvdXNQb3NpdGlvbi50b3AgLSBjdXJyZW50UG9zaXRpb24udG9wLFxuXHR3aWR0aDogY3VycmVudFBvc2l0aW9uLndpZHRoIC0gcHJldmlvdXNQb3NpdGlvbi53aWR0aCxcblx0aGVpZ2h0OiBjdXJyZW50UG9zaXRpb24uaGVpZ2h0IC0gcHJldmlvdXNQb3NpdGlvbi5oZWlnaHQsXG5cdHNjYWxlWDogKHByZXZpb3VzUG9zaXRpb24ud2lkdGggLyBjdXJyZW50UG9zaXRpb24ud2lkdGgpLFxuXHRjU2NhbGVYOiAoY3VycmVudFBvc2l0aW9uLndpZHRoIC8gcHJldmlvdXNQb3NpdGlvbi53aWR0aCksXG5cdHNjYWxlWTogKHByZXZpb3VzUG9zaXRpb24uaGVpZ2h0IC8gY3VycmVudFBvc2l0aW9uLmhlaWdodCksXG5cdGNTY2FsZVk6IChjdXJyZW50UG9zaXRpb24uaGVpZ2h0IC8gcHJldmlvdXNQb3NpdGlvbi5oZWlnaHQpLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlbHRhIiwiLyoqXG4gKiBHZXRzIHRoZSB0b3AsIGxlZnQsIHdpZHRoIGFuZCBoZWlnaHQgb2YgYSBzaW5nbGUgaXRlbS5cbiAqIFxuICogQHBhcmFtXHRncmlkQm91bmRpbmdDbGllbnRSZWN0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCByZXN1bHQgb2YgdGhlIGdyaWQuXG4gKiBAcGFyYW0gXHRpdGVtQm91bmRpbmdDbGllbnRSZWN0IEEgc2luZ2xlIGdyaWQgaXRlbSdzIGJvdW5kaW5nQ2xpZW50UmVjdC5cbiAqIEByZXR1cm5zXHRPYmplY3Qgd2l0aCB0b3AsIGxlZnQsIHdpZHRoIGFuZCBoZWlnaHRcbiAqL1xuY29uc3QgZ2V0SXRlbVJlbGF0aXZlQm91bmRDbGllbnRSZWN0ID0gKFxuXHRncmlkQm91bmRpbmdDbGllbnRSZWN0OiBET01SZWN0LCBcblx0aXRlbUJvdW5kaW5nQ2xpZW50UmVjdDogRE9NUmVjdFxuKTogR3JpZFBvc2l0aW9uID0+IHtcblx0Y29uc3QgeyB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQgfSA9IGl0ZW1Cb3VuZGluZ0NsaWVudFJlY3Q7XG5cdHJldHVybiB7IFxuXHRcdHRvcDogdG9wIC0gZ3JpZEJvdW5kaW5nQ2xpZW50UmVjdC50b3AsIFxuXHRcdGxlZnQ6IGxlZnQgLSBncmlkQm91bmRpbmdDbGllbnRSZWN0LmxlZnQsIFxuXHRcdHdpZHRoLCBcblx0XHRoZWlnaHQgXG5cdH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRJdGVtUmVsYXRpdmVCb3VuZENsaWVudFJlY3QiLCIvKipcbiAqIENoZWNrcyBpZiB0aGUgY3VycmVudCBwb3NpdGlvbiBpcyBkaWZmZXJlbnQgZnJvbVxuICogdGhlIHByZXZpb3VzIHBvc2l0aW9uIGFuZCByZXR1cm5zIGEgYm9vbGVhbi5cbiAqIFxuICogQHBhcmFtIFx0e0dyaWRQb3NpdGlvbn0gcHJldmlvdXNQb3NpdGlvbiBcbiAqIEBwYXJhbSBcdHtHcmlkUG9zaXRpb259IGN1cnJlbnRQb3NpdGlvbiBcbiAqIEByZXR1cm5zXHR7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzQ2hhbmdlZFBvc2l0aW9ucyA9IChwcmV2aW91c1Bvc2l0aW9uOiBHcmlkUG9zaXRpb24sIGN1cnJlbnRQb3NpdGlvbjogR3JpZFBvc2l0aW9uKSA9PiAhKFxuXHRwcmV2aW91c1Bvc2l0aW9uLnRvcCA9PT0gY3VycmVudFBvc2l0aW9uLnRvcCAmJlxuXHRwcmV2aW91c1Bvc2l0aW9uLmxlZnQgPT09IGN1cnJlbnRQb3NpdGlvbi5sZWZ0ICYmXG5cdHByZXZpb3VzUG9zaXRpb24ud2lkdGggPT09IGN1cnJlbnRQb3NpdGlvbi53aWR0aCAmJlxuXHRwcmV2aW91c1Bvc2l0aW9uLmhlaWdodCA9PT0gY3VycmVudFBvc2l0aW9uLmhlaWdodFxuKVxuXG5leHBvcnQgZGVmYXVsdCBoYXNDaGFuZ2VkUG9zaXRpb25zIiwiLyoqXG4gKiBDaGVja3MgaWYgdGhlIG11dGF0aW9ucyBhcmUgcmVsZXZhbnQgYnkgY2hlY2tpbmdcbiAqIGlmIHRoZXJlIGFyZSBub2RlcyBhZGRlZCwgbm9kZXMgcmVtb3ZlcyBvclxuICogaGFzIHRoZSBjbGFzcyBhdHRyaWJ1dGUgbW9kaWZpZWQuXG4gKiBcbiAqIEBwYXJhbSBcdHtNdXRhdGlvblJlY29yZFtdfSBtdXRhdGlvbnMgXG4gKiBAcmV0dXJuc1x0e2Jvb2xlYW59XG4gKi9cbmNvbnN0IGhhc1JlbGV2YW50TXV0YXRpb25zID0gKG11dGF0aW9uczogTXV0YXRpb25SZWNvcmRbXSkgPT4gXG5cdG11dGF0aW9ucy5maWx0ZXIoKHsgYXR0cmlidXRlTmFtZSwgYWRkZWROb2RlcywgcmVtb3ZlZE5vZGVzIH0pID0+IFxuXHRcdGF0dHJpYnV0ZU5hbWUgPT09ICdjbGFzcycgfHxcblx0XHRhZGRlZE5vZGVzLmxlbmd0aCB8fFxuXHRcdHJlbW92ZWROb2Rlcy5sZW5ndGhcblx0KS5sZW5ndGggPiAwO1xuXG5leHBvcnQgZGVmYXVsdCBoYXNSZWxldmFudE11dGF0aW9ucyIsImltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnLi90aW1pbmcnO1xuaW1wb3J0IHsgZ2V0SXRlbVJlbGF0aXZlQm91bmRDbGllbnRSZWN0LCBkZWx0YSwgaGFzQ2hhbmdlZFBvc2l0aW9ucyB9IGZyb20gJy4vZGlzdGFuY2UnO1xuaW1wb3J0IHsgaGFzUmVsZXZhbnRNdXRhdGlvbnMgfSBmcm9tICcuL2NoZWNrcyc7XG5pbXBvcnQgeyBkaXNwYXRjaFRyYW5zaXRpb25HcmlkQW5pbWF0aW9uU3RhcnRFdmVudCwgZGlzcGF0Y2hUcmFuc2l0aW9uR3JpZEFuaW1hdGlvbkVuZEV2ZW50IH0gZnJvbSAnLi9ldmVudHMnO1xuXG4vKipcbiAqIFRyYW5zaXRpb24gR3JpZCBFbGVtZW50LlxuICogTGlzdGVucyBmb3IgbXV0YXRpb25zIGluIHRoZSBjaGlsZHJlbiBvZiB0aGUgZWxlbWVudCBhbmRcbiAqIGluIHRoZSBlbGVtZW50IGl0c2VsZi4gSXQgdGhlbiBhbmltYXRlcyB0aGUgZ3JpZCBpdGVtcyBmcm9tXG4gKiB0aGVpciBvbGQgdG8gdGhlaXIgbmV3IHNpdHV0YXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zaXRpb25HcmlkRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcblxuXHQvKipcblx0ICogRGVmYXVsdCB2YWx1ZXMgZm9yIHRoZSBhbmltYXRpb25zLlxuXHQgKi9cblx0c3RhdGljIGdldCBkZWZhdWx0VmFsdWVzKCk6IERlZmF1bHRQYXJhbWV0ZXJzIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0RFVSQVRJT046IDI1MCxcblx0XHRcdFNUQUdHRVI6IDAsXG5cdFx0XHRFQVNJTkc6ICdjdWJpYy1iZXppZXIoMC40MiwgMCwgMC4xMiwgMC45NyknLFxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQW5pbWF0aW9uIHN0YXRlIGZsYWcuXG5cdCAqL1xuXHRpc0FuaW1hdGluZyA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBDdXJyZW50IGNhY2hlZCBET01SZWN0IG9mIHRoZSBUcmFuc2l0aW9uR3JpZEVsZW1lbnQuXG5cdCAqL1xuXHQjYm91bmRpbmdDbGllbnRSZWN0OiBET01SZWN0IHwgbnVsbCA9IG51bGw7XG5cblx0LyoqXG5cdCAqIE1hcCB3aXRoIGdyaWQgaXRlbXMgYXMga2V5cyBhbmQgRE9NUmVjdHMgYXMgdmFsdWVzLlxuXHQgKiBDYWNoZXMgZWFjaCBsYXN0IGtub3duIHBvc2l0aW9uIG9mIGVhY2ggZWxlbWVudC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdCNwb3NpdGlvbnMgPSBuZXcgTWFwKCk7XG5cblx0LyoqXG5cdCAqIFN0b3JlcyB0aGUgY3VycmVudCBtdXRhdGlvbiBvYnNlcnZlciBpbnN0YW5jZS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdCNtdXRhdGlvbk9ic2VydmVyOiBNdXRhdGlvbk9ic2VydmVyIHwgbnVsbCA9IG51bGw7XG5cblx0LyoqXG5cdCAqIFN0b3JlcyB0aGUgY3VycmVudCBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXIgaW5zdGFuY2UuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHQjaW50ZXJzZWN0aW9uT2JzZXJ2ZXI6IEludGVyc2VjdGlvbk9ic2VydmVyIHwgbnVsbCA9IG51bGw7XG5cblx0LyoqXG5cdCAqIEZsYWcgZm9yIGNoZWNraW5nIGlmIHRoZSBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzIGFyZSBhZGRlZFxuXHQgKiBvciBub3QuXG5cdCAqL1xuXHQjbGlzdGVuaW5nVG9FdmVudHMgPSBmYWxzZTtcblxuXHQvKipcblx0ICogTG9vcHMgb3ZlciBlYWNoIGl0ZW0gYW5kIHN0b3JlcyBhIG5ldyBsYXN0IGtub3duIHBvc2l0aW9uLiBcblx0ICogQHByaXZhdGVcblx0ICovXG5cdCN1cGRhdGVQb3NpdGlvbnMgPSAoKSA9PiB7XG5cdFx0dGhpcy4jYm91bmRpbmdDbGllbnRSZWN0ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuXHRcdFx0Y29uc3QgaXRlbUJvdW5kaW5nQ2xpZW50UmVjdCA9IGl0ZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHR0aGlzLiNwb3NpdGlvbnMuc2V0KGl0ZW0sIGl0ZW1Cb3VuZGluZ0NsaWVudFJlY3QpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogVGhyb3R0bGVkIGNhY2hpbmcgZnVuY3Rpb24gdGhhdCBzdG9yZXMgdGhlIGxhc3Qga25vdyBET01SZWN0XG5cdCAqIGFmdGVyIGVpdGhlciBzY3JvbGxpbmcgb3IgcmVzaXppbmcuIEhhcyBhIDEwMG1zIGRlbGF5LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0I3VwZGF0ZUJvdW5kaW5nQ2xpZW50UmVjdEFuZFBvc2l0aW9ucyA9IGRlYm91bmNlKCgpID0+IHtcblx0XHR0aGlzLiN1cGRhdGVQb3NpdGlvbnMoKTtcblx0fSwgMTAwKTtcblxuXHQvKipcblx0ICogU2V0dXAgYW5kIG1haW4gbG9naWMgb2YgdGhlIGNvbXBvbmVudC5cblx0ICovXG5cdCNzZXR1cE9ic2VydmVycyA9ICgpID0+IHtcblxuXHRcdC8qKlxuXHRcdCAqIEdldHMgdGhlIG9sZCBwb3NpdGlvbiBhbmQgY2FsY3VsYXRlcyB0aGUgcG9zaXRpb24gcmVsYXRpdmUgdG9cblx0XHQgKiB0aGUgbmV3IGdyaWQgc2l6ZS4gVGhlbiB1cGRhdGVzIGVhY2ggaXRlbSB3aXRoIHRoZSBuZXcgcG9zaXRpb25zXG5cdFx0ICovXG5cdFx0Y29uc3QgY2FsY3VsYXRlUG9zaXRpb25zID0gKGl0ZW06IEhUTUxFbGVtZW50KSA9PiB7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogR2V0IHRoZSBjdXJyZW50IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IGdyaWQuXG5cdFx0XHQgKi9cblx0XHRcdGNvbnN0IGN1cnJlbnRCb3VuZGluZ0NsaWVudFJlY3QgPSBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0Y29uc3QgY3VycmVudFBvc2l0aW9uID0gZ2V0SXRlbVJlbGF0aXZlQm91bmRDbGllbnRSZWN0KFxuXHRcdFx0XHR0aGlzLiNib3VuZGluZ0NsaWVudFJlY3QsXG5cdFx0XHRcdGN1cnJlbnRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdCk7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogR2V0IHRoZSBwcmV2aW91cyBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBncmlkLlxuXHRcdFx0ICovXG5cdFx0XHRjb25zdCBwcmV2aW91c0JvdW5kaW5nQ2xpZW50UmVjdCA9IHRoaXMuI3Bvc2l0aW9ucy5nZXQoaXRlbSk7XG5cdFx0XHRjb25zdCBwcmV2aW91c1Bvc2l0aW9uID0gZ2V0SXRlbVJlbGF0aXZlQm91bmRDbGllbnRSZWN0KFxuXHRcdFx0XHR0aGlzLiNib3VuZGluZ0NsaWVudFJlY3QsIFxuXHRcdFx0XHRwcmV2aW91c0JvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0KTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBTdG9yZSB0aGUgbmV3IHBvc2l0aW9uLlxuXHRcdFx0ICovXG5cdFx0XHR0aGlzLiNwb3NpdGlvbnMuc2V0KGl0ZW0sIGN1cnJlbnRCb3VuZGluZ0NsaWVudFJlY3QpO1xuXG5cdFx0XHRyZXR1cm4geyBpdGVtLCBjdXJyZW50UG9zaXRpb24sIHByZXZpb3VzUG9zaXRpb24gfVxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm4gb25seSBpdGVtcyB0aGF0IHNob3VsZCBiZSBhbmltYXRlZC5cblx0XHQgKiBDaGVja3MgaWYgdGhlIHByZXZpb3VzIGFuZCBjdXJyZW50IHBvc2l0aW9ucyBhcmUgdGhlIHNhbWUuXG5cdFx0ICovXG5cdFx0Y29uc3QgZmlsdGVyT25seUl0ZW1zV2l0aENoYW5nZXMgPSAoeyBcblx0XHRcdGN1cnJlbnRQb3NpdGlvbiwgXG5cdFx0XHRwcmV2aW91c1Bvc2l0aW9uIFxuXHRcdH06IHtcblx0XHRcdGN1cnJlbnRQb3NpdGlvbjogR3JpZFBvc2l0aW9uLCBcblx0XHRcdHByZXZpb3VzUG9zaXRpb246IEdyaWRQb3NpdGlvbiBcblx0XHR9KSA9PiBoYXNDaGFuZ2VkUG9zaXRpb25zKGN1cnJlbnRQb3NpdGlvbiwgcHJldmlvdXNQb3NpdGlvbik7XG5cblx0XHQvKipcblx0XHQgKiBBbmltYXRlIHRoZSBpdGVtcyBmcm9tIHRoZWlyIG9sZCB0byB0aGVpciBuZXcgcG9zaXRpb24uXG5cdFx0ICovXG5cdFx0Y29uc3QgdHJhbnNpdGlvbkdyaWRJdGVtcyA9ICh7IFxuXHRcdFx0aXRlbSwgXG5cdFx0XHRjdXJyZW50UG9zaXRpb24sIFxuXHRcdFx0cHJldmlvdXNQb3NpdGlvbiBcblx0XHR9OiB7XG5cdFx0XHRpdGVtOiBIVE1MRWxlbWVudCwgXG5cdFx0XHRjdXJyZW50UG9zaXRpb246IEdyaWRQb3NpdGlvbiwgXG5cdFx0XHRwcmV2aW91c1Bvc2l0aW9uOiBHcmlkUG9zaXRpb24gXG5cdFx0fSwgXG5cdFx0XHRpbmRleDogbnVtYmVyLFxuXHRcdFx0aXRlbXM6IGFueVxuXHRcdCk6IFByb21pc2U8SFRNTEVsZW1lbnQ+ID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGN1bGF0ZSB0aGUgZGlmZmVyZW5jZXMgaW4gdGhlIHBvc2l0aW9ucy5cblx0XHRcdCAqL1xuXHRcdFx0Y29uc3QgeyBcblx0XHRcdFx0eCxcblx0XHRcdFx0eSxcblx0XHRcdFx0c2NhbGVYLFxuXHRcdFx0XHRzY2FsZVksXG5cdFx0XHR9ID0gZGVsdGEocHJldmlvdXNQb3NpdGlvbiwgY3VycmVudFBvc2l0aW9uKTtcblx0XHRcdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBHZW5lcmF0ZSBzdHlsZXMgZm9yIHRoZSB0cmFuc2l0aW9uLlxuXHRcdFx0ICovXG5cdFx0XHRjb25zdCB0cmFuc2Zvcm1Gcm9tID0gYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAwKSBzY2FsZSgke3NjYWxlWH0sICR7c2NhbGVZfSlgO1xuXHRcdFx0Y29uc3QgdHJhbnNmb3JtVG8gPSBgdHJhbnNsYXRlM2QoMCwgMCwgMCkgc2NhbGUoMSwgMSlgO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIFNldCBhIHByZWxpbWVuYXJ5IHBvc2l0aW9uIHNvIHRoYXQgdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBpbiB0aGUgXG5cdFx0XHQgKiBzdGFydGluZyBwb3NpdGlvbiBiZWZvcmUgaXQgYW5pbWF0ZXMgdG8gdGhlIG5ldyBwb3NpdGlvbi5cblx0XHRcdCAqL1xuXHRcdFx0aXRlbS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1Gcm9tO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIFNldCBhIHotaW5kZXggYmFzZWQgb24gZmlyc3QgbW92ZSwgdG9wIGluZGV4LiBcblx0XHRcdCAqL1xuXHRcdFx0aXRlbS5zdHlsZS56SW5kZXggPSBgJHtpdGVtcy5sZW5ndGggLSBpbmRleH1gO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIFNldCB0aGUgYW5pbWF0aW9uIGluIG1vdGlvbi5cblx0XHRcdCAqL1xuXHRcdFx0Y29uc3QgYW5pbWF0aW9uID0gaXRlbS5hbmltYXRlKFtcblx0XHRcdFx0eyB0cmFuc2Zvcm06IHRyYW5zZm9ybUZyb20gfSxcblx0XHRcdFx0eyB0cmFuc2Zvcm06IHRyYW5zZm9ybVRvIH0sXG5cdFx0XHRdLCB7XG5cdFx0XHRcdGR1cmF0aW9uOiB0aGlzLmR1cmF0aW9uLFxuXHRcdFx0XHRkZWxheTogdGhpcy5zdGFnZ2VyICogaW5kZXgsXG5cdFx0XHRcdGVhc2luZzogdGhpcy5lYXNpbmcsXG5cdFx0XHR9KTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBUT0RPOiBBbmltYXRlIHRoZSBmaXJzdEVsZW1lbnRDaGlsZCdzIGFzcGVjdCByYXRpbyBmcm9tIHRoZSBjdXJyZW50IHNpemUgdG8gdGhlIG5ldyBzaXplLlxuXHRcdFx0ICovXG5cdFx0XHQvLyBpZiAod2lkdGggIT09IDAgfHwgaGVpZ2h0ICE9PSAwKSB7XG5cdFx0XHQvLyBcdGNvbnNvbGUubG9nKHNjYWxlWCwgc2NhbGVZLCB3aWR0aCwgaGVpZ2h0KTtcblxuXHRcdFx0Ly8gXHRjb25zdCBjaGlsZCA9IGl0ZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHQvLyBcdGlmIChjaGlsZCkge1xuXHRcdFx0Ly8gXHRcdGNvbnN0IHsgb2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCB9ID0gY2hpbGQgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0XHQvLyBcdFx0Y2hpbGQuYW5pbWF0ZShbXG5cdFx0XHQvLyBcdFx0XHR7IFxuXHRcdFx0Ly8gXHRcdFx0XHRoZWlnaHQ6IGAke29mZnNldEhlaWdodCArIGhlaWdodH1weGAsXG5cdFx0XHQvLyBcdFx0XHRcdHdpZHRoOiBgJHtvZmZzZXRXaWR0aCArIHdpZHRofXB4YCxcblx0XHRcdC8vIFx0XHRcdFx0Ly8gdHJhbnNmb3JtOiBgc2NhbGUoJHtjU2NhbGVYfSwgJHtjU2NhbGVZfSlgXG5cdFx0XHQvLyBcdFx0XHR9LFxuXHRcdFx0Ly8gXHRcdFx0eyBcblx0XHRcdC8vIFx0XHRcdFx0aGVpZ2h0OiBgJHtvZmZzZXRIZWlnaHR9cHhgLFxuXHRcdFx0Ly8gXHRcdFx0XHR3aWR0aDogYCR7b2Zmc2V0V2lkdGh9cHhgLFxuXHRcdFx0Ly8gXHRcdFx0XHQvLyB0cmFuc2Zvcm06IGBzY2FsZSgxLCAxKWBcblx0XHRcdC8vIFx0XHRcdH0sXG5cdFx0XHQvLyBcdFx0XSwge1xuXHRcdFx0Ly8gXHRcdFx0ZHVyYXRpb246IHRoaXMuZHVyYXRpb24sXG5cdFx0XHQvLyBcdFx0XHRkZWxheTogdGhpcy5zdGFnZ2VyICogaSxcblx0XHRcdC8vIFx0XHRcdGVhc2luZzogdGhpcy5lYXNpbmcsXG5cdFx0XHQvLyBcdFx0fSk7XG5cdFx0XHQvLyBcdH1cblx0XHRcdC8vIH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBSZW1vdmUgdGhlIHN0eWxlIHByb3BlcnR5IGFmdGVyIHRoZSBhbmltYXRpb24gaXMgZmluaXNoZWQuXG5cdFx0XHQgKi9cblx0XHRcdGFuaW1hdGlvbi5hZGRFdmVudExpc3RlbmVyKCdmaW5pc2gnLCAoKSA9PiB7XG5cdFx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG5cdFx0XHRcdFx0aXRlbS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcblx0XHRcdFx0XHRpdGVtLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICcnO1xuXHRcdFx0XHRcdGlmIChpdGVtLmdldEF0dHJpYnV0ZSgnc3R5bGUnKSA9PT0gJycpIHtcblx0XHRcdFx0XHRcdGl0ZW0ucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXNvbHZlKGl0ZW0pO1xuXHRcdFx0XHR9KVxuXHRcdFx0fSwgeyBvbmNlOiB0cnVlIH0pO1xuXHRcdH0pO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhbGxiYWNrIHdoZW5ldmVyIGEgbXV0YXRpb24gb2NjdXJzLlxuXHRcdCAqIFxuXHRcdCAqIEBwYXJhbSBcdHtNdXRhdGlvblJlY29yZFtdfSBtdXRhdGlvbnMgXG5cdFx0ICogQHJldHVybnNcdHt2b2lkfVxuXHRcdCAqL1xuXHRcdGNvbnN0IG11dGF0aW9uQ2FsbGJhY2sgPSAobXV0YXRpb25zOiBNdXRhdGlvblJlY29yZFtdKSA9PiB7XG5cdFx0XHRjb25zdCBzaG91bGRBbmltYXRlID0gaGFzUmVsZXZhbnRNdXRhdGlvbnMobXV0YXRpb25zKTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDaGVjayBpZiB0aGUgYW5pbWF0aW9uIHNob3VsZCBhbmltYXRlIGJhc2VkIG9uIHRoZVxuXHRcdFx0ICogbXV0YXRlZCBwcm9wZXJ0aWVzIG9yIGNoZWNrIGlmIHRoZSBhbmltYXRpb24gaXMgXG5cdFx0XHQgKiBhbHJlYWR5IHJ1bm5pbmcuXG5cdFx0XHQgKi9cblx0XHRcdGlmICghc2hvdWxkQW5pbWF0ZSB8fCB0aGlzLmlzQW5pbWF0aW5nKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBEaXNwYXRjaGVzIGdyaWQgYW5pbWF0aW9uIHN0YXJ0IGV2ZW50LlxuXHRcdFx0ICogRW5hYmxlcyB1c2VycyB0byBob29rIGludG8gdG8gdGhlIGJlZ2lubmluZ1xuXHRcdFx0ICogb2YgdGhlIGFuaW1hdGlvbi5cblx0XHRcdCAqL1xuXHRcdFx0ZGlzcGF0Y2hUcmFuc2l0aW9uR3JpZEFuaW1hdGlvblN0YXJ0RXZlbnQodGhpcyk7XG5cdFx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogU2V0IGFuaW1hdGlvbiBzdGF0ZSB0byB0cnVlO1xuXHRcdFx0ICovXG5cdFx0XHR0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBVcGRhdGUgdGhlIGdyaWQgY2xpZW50IHJlY3QgdG8gdGhlIGN1cnJlbnQgc3RhdGUuXG5cdFx0XHQgKi9cblx0XHRcdHRoaXMuI2JvdW5kaW5nQ2xpZW50UmVjdCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2hlY2sgZm9yIGFkZGVkIG5vZGVzIHRoYXQgbmVlZCB0byBiZSBhbmltYXRlZCBpbi5cblx0XHRcdCAqL1xuXHRcdFx0Zm9yIChjb25zdCB7IGFkZGVkTm9kZXMgfSBvZiBtdXRhdGlvbnMpIHtcblx0XHRcdFx0Zm9yIChjb25zdCBub2RlIG9mIGFkZGVkTm9kZXMpIHtcblx0XHRcdFx0XHRjb25zdCBlbGVtZW50ID0gbm9kZSBhcyBIVE1MRWxlbWVudDtcblxuXHRcdFx0XHRcdC8qKlxuXHRcdFx0XHRcdCAqIENhbGN1bGF0ZSB0aGUgZWxlbWVudCdzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBncmlkIHNvIHRoYXRcblx0XHRcdFx0XHQgKiB3ZSBrbm93IGl0J3MgcG9zaXRpb24gd2hlbiBpdCBlbnRlcnMgdGhlIERPTS5cblx0XHRcdFx0XHQgKi9cblx0XHRcdFx0XHRjb25zdCBjdXJyZW50Qm91bmRpbmdDbGllbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdFx0XHRjb25zdCBjdXJyZW50UG9zaXRpb24gPSBnZXRJdGVtUmVsYXRpdmVCb3VuZENsaWVudFJlY3QoXG5cdFx0XHRcdFx0XHR0aGlzLiNib3VuZGluZ0NsaWVudFJlY3QsXG5cdFx0XHRcdFx0XHRjdXJyZW50Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdC8qKlxuXHRcdFx0XHRcdCAqIFN0YXJ0aW5nIHBvc2l0aW9uIHNob3VsZCBiZSBwb3NpdGlvbmVkIGZyb20gdGhlIGNlbnRlciBzbyB0aGF0XG5cdFx0XHRcdFx0ICogdGhlIGVsZW1lbnQgaGFzIGEgbmljZXIgYW5pbWF0aW9uIHdoZW4gYmVpbmcgYWRkZWQgdG8gdGhlIERPTS5cblx0XHRcdFx0XHQgKi9cblx0XHRcdFx0XHRjb25zdCBzdGFydFBvc2l0aW9uID0ge1xuXHRcdFx0XHRcdFx0bGVmdDogY3VycmVudFBvc2l0aW9uLmxlZnQsXG5cdFx0XHRcdFx0XHR0b3A6IGN1cnJlbnRQb3NpdGlvbi50b3AsXG5cdFx0XHRcdFx0XHR3aWR0aDogMCxcblx0XHRcdFx0XHRcdGhlaWdodDogMCxcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0LyoqXG5cdFx0XHRcdFx0ICogQW5pbWF0ZSB0aGlzIGVsZW1lbnQgaW4gZnJvbSB0aGUgY2VudGVyLlxuXHRcdFx0XHRcdCAqL1xuXHRcdFx0XHRcdGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gJzUwJSA1MCUnO1xuXG5cdFx0XHRcdFx0LyoqXG5cdFx0XHRcdFx0ICogU2V0IHRoZSBzdGFydGluZyBwb3NpdGlvbi5cblx0XHRcdFx0XHQgKi9cblx0XHRcdFx0XHR0aGlzLiNwb3NpdGlvbnMuc2V0KGVsZW1lbnQsIHN0YXJ0UG9zaXRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQW5pbWF0ZSBlYWNoIGl0ZW0gZnJvbSBpdHMgb2xkIHRvIGl0cyBuZXcgcG9zaXRpb24uXG5cdFx0XHQgKi9cblx0XHRcdGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLml0ZW1zXG5cblx0XHRcdFx0LyoqXG5cdFx0XHRcdCAqIENhbGN1bGF0ZSBwb3NpdGlvbiBvZiBlYWNoIGl0ZW0gYW5kIHN0b3JlIHRoZSBuZXcgcG9zaXRpb24uXG5cdFx0XHRcdCAqIFJldHVybnMgdGhlIGl0ZW0sIHRoZSBuZXcgYW5kIHRoZSBwcmV2aW91cyBwb3NpdGlvbnMuXG5cdFx0XHRcdCAqL1xuXHRcdFx0XHQubWFwKGNhbGN1bGF0ZVBvc2l0aW9ucylcblxuXHRcdFx0XHQvKipcblx0XHRcdFx0ICogRmlsdGVyIG91dCBhbnkgaXRlbXMgdGhhdCBoYXZlbid0IG1vdmVkIG9yIGNoYW5nZWQuXG5cdFx0XHRcdCAqL1xuXHRcdFx0XHQuZmlsdGVyKGZpbHRlck9ubHlJdGVtc1dpdGhDaGFuZ2VzKVxuXHRcdFx0XG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQgKiBBbmltYXRlIHRoZSBncmlkIGl0ZW1zLlxuXHRcdFx0XHQgKi9cblx0XHRcdFx0Lm1hcCh0cmFuc2l0aW9uR3JpZEl0ZW1zKTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBXYWl0IGZvciBhbGwgYW5pbWF0aW9ucyB0byBmaW5pc2guXG5cdFx0XHQgKi9cblx0XHRcdFByb21pc2UuYWxsKGFuaW1hdGlvbnMpLnRoZW4oaXRlbXMgPT4ge1xuXHRcdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuI3VwZGF0ZVBvc2l0aW9ucygpO1xuXHRcdFx0XHRcdGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG5cdFx0XHRcdFx0XHRpdGVtLnN0eWxlLnpJbmRleCA9ICcnO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZGlzcGF0Y2hUcmFuc2l0aW9uR3JpZEFuaW1hdGlvbkVuZEV2ZW50KHRoaXMpO1xuXHRcdFx0XHR0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XG5cdFx0XHR9KVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHdoZW5ldmVyIHRoZSBlbGVtZW50cyBpcyBpbiB2aWV3LlxuXHRcdCAqIFRoaXMgcHJldmVudHMgdGhlIHNjcm9sbCBhbmQgcmVzaXplIGxpc3RlbmVycyBmcm9tIG5lZWRsZXNzbHlcblx0XHQgKiBmaXJpbmcgd2hlbiB0aGUgZWxlbWVudCBpcyBvdXQgb2Ygdmlldy5cblx0XHQgKi9cblx0XHRjb25zdCBpbnRlcnNlY3Rpb25DYWxsYmFjayA9IChlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10pID0+IHtcblx0XHRcdGZvciAoY29uc3QgeyBpc0ludGVyc2VjdGluZyB9IG9mIGVudHJpZXMpIHtcblx0XHRcdFx0aWYgKCF0aGlzLiNsaXN0ZW5pbmdUb0V2ZW50cyAmJiBpc0ludGVyc2VjdGluZykge1xuXHRcdFx0XHRcdHRoaXMuI2FkZEV2ZW50TGlzdGVuZXJzKCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy4jbGlzdGVuaW5nVG9FdmVudHMgJiYgIWlzSW50ZXJzZWN0aW5nKSB7XG5cdFx0XHRcdFx0dGhpcy4jcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIENyZWF0ZSBhIG5ldyBNdXRhdGlvbk9ic2VydmVyIHRoYXQgYW5pbWF0ZXMgdGhlIGl0ZW1zXG5cdFx0ICogd2hlbiBpdCBkZXRlY3RzIGEgY2hhbmdlIGluIHRoZSBjbGFzc2VzIG9yIGNoaWxkcmVuLlxuXHRcdCAqL1xuXHRcdHRoaXMuI211dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihtdXRhdGlvbkNhbGxiYWNrKTtcblx0XHR0aGlzLiNtdXRhdGlvbk9ic2VydmVyLm9ic2VydmUodGhpcywge1xuXHRcdFx0Y2hpbGRMaXN0OiB0cnVlLFxuXHRcdFx0YXR0cmlidXRlczogdHJ1ZSxcblx0XHRcdHN1YnRyZWU6IHRydWUsXG5cdFx0XHRhdHRyaWJ1dGVGaWx0ZXI6IFsnY2xhc3MnXSxcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqIENyZWF0ZSBhIG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlciBpbnN0YW5jZSB0byBhZGQgb3IgcmVtb3ZlXG5cdFx0ICogZXZlbnQgbGlzdGVuZXJzIHRoYXQgYXJlIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3cgb2JqZWN0IHRvIFxuXHRcdCAqIGVuaGFuY2UgcGVyZm9ybWFuY2UuXG5cdFx0ICovXG5cdFx0dGhpcy4jaW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaW50ZXJzZWN0aW9uQ2FsbGJhY2ssIHtcblx0XHRcdHJvb3Q6IG51bGwsXG5cdFx0XHRyb290TWFyZ2luOiAnLTUwcHgnLFxuXHRcdFx0dGhyZXNob2xkOiBbMF1cblx0XHR9KTtcblx0XHR0aGlzLiNpbnRlcnNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIHNjcm9sbCBhbmQgcmVzaXplIGV2ZW50IGxpc3RlbmVycy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdCNhZGRFdmVudExpc3RlbmVycyA9ICgpID0+IHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy4jdXBkYXRlQm91bmRpbmdDbGllbnRSZWN0QW5kUG9zaXRpb25zKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy4jdXBkYXRlQm91bmRpbmdDbGllbnRSZWN0QW5kUG9zaXRpb25zKTtcblx0XHR0aGlzLiNsaXN0ZW5pbmdUb0V2ZW50cyA9IHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgc2Nyb2xsIGFuZCByZXNpemUgZXZlbnQgbGlzdGVuZXJzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0I3JlbW92ZUV2ZW50TGlzdGVuZXJzID0gKCkgPT4ge1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLiN1cGRhdGVCb3VuZGluZ0NsaWVudFJlY3RBbmRQb3NpdGlvbnMpO1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLiN1cGRhdGVCb3VuZGluZ0NsaWVudFJlY3RBbmRQb3NpdGlvbnMpO1xuXHRcdHRoaXMuI2xpc3RlbmluZ1RvRXZlbnRzID0gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgY2hpbGRyZW4gb2YgdGhpcyBlbGVtZW50IGluIGFuIGFycmF5LlxuXHQgKiBAcHJvcGVydHlcblx0ICovXG5cdGdldCBpdGVtcygpIHtcblx0XHRyZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNoaWxkcmVuKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIGFuZCBzZXRzIHRoZSBkdXJhdGlvbiBhdHRyaWJ1dGUuXG5cdCAqIEBwcm9wZXJ0eVxuXHQgKi9cblx0Z2V0IGR1cmF0aW9uKCkge1xuXHRcdHJldHVybiBOdW1iZXIodGhpcy5nZXRBdHRyaWJ1dGUoJ2R1cmF0aW9uJykpO1xuXHR9XG5cblx0c2V0IGR1cmF0aW9uKHZhbHVlKSB7XG5cdFx0Y29uc3QgbnVtYmVyID0gTnVtYmVyKHZhbHVlKTtcblx0XHRpZiAoIU51bWJlci5pc05hTihudW1iZXIpKSB7XG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSgnZHVyYXRpb24nLCBudW1iZXIudG9TdHJpbmcoKSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgYW5kIHNldHMgdGhlIHN0YWdnZXIgYXR0cmlidXRlLlxuXHQgKiBAcHJvcGVydHlcblx0ICovXG5cdGdldCBzdGFnZ2VyKCkge1xuXHRcdHJldHVybiBOdW1iZXIodGhpcy5nZXRBdHRyaWJ1dGUoJ3N0YWdnZXInKSk7XG5cdH1cblxuXHRzZXQgc3RhZ2dlcih2YWx1ZSkge1xuXHRcdGNvbnN0IG51bWJlciA9IE51bWJlcih2YWx1ZSk7XG5cdFx0aWYgKCFOdW1iZXIuaXNOYU4obnVtYmVyKSkge1xuXHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoJ3N0YWdnZXInLCBudW1iZXIudG9TdHJpbmcoKSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBhbmQgc2V0IHRoZSBlYXNpbmcgYXR0cmlidXRlIHZhbHVlLlxuXHQgKiBAcHJvcGVydHlcblx0ICovXG5cdGdldCBlYXNpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdlYXNpbmcnKTtcblx0fVxuXG5cdHNldCBlYXNpbmcodmFsdWUpIHtcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSkge1xuXHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoJ2Vhc2luZycsIHZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoJ2Vhc2luZycsICcnKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRmlyZXMgd2hlbiB0aGUgZWxlbWVudCBoYXMgYmVlbiBjb25uZWN0ZWQuXG5cdCAqIFxuXHQgKiBAbWV0aG9kXHRjb25uZWN0ZWRDYWxsYmFja1xuXHQgKiBAcmV0dXJuc1x0e3ZvaWR9XG5cdCAqL1xuXHRjb25uZWN0ZWRDYWxsYmFjaygpIHtcblx0XHRpZiAoISgnYW5pbWF0ZScgaW4gdGhpcykgfHwgISgnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZXMgb2YgdGhpcyBjb21wb25lbnQuXG5cdFx0ICovXG5cdFx0Y29uc3Qge1xuXHRcdFx0RFVSQVRJT04sXG5cdFx0XHRTVEFHR0VSLFxuXHRcdFx0RUFTSU5HXG5cdFx0fSA9IFRyYW5zaXRpb25HcmlkRWxlbWVudC5kZWZhdWx0VmFsdWVzO1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0IGRlZmF1bHQgdmFsdWUgZm9yIGR1cmF0aW9uIGlmIGF0dHJpYnV0ZVxuXHRcdCAqIGhhcyBub3QgeWV0IGJlZW4gc2V0LlxuXHRcdCAqL1xuXHRcdGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnZHVyYXRpb24nKSA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5kdXJhdGlvbiA9IERVUkFUSU9OO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFNldCBkZWZhdWx0IHZhbHVlIGZvciBzdGFnZ2VyIGlmIGF0dHJpYnV0ZVxuXHRcdCAqIGhhcyBub3QgeWV0IGJlZW4gc2V0LlxuXHRcdCAqL1xuXHRcdGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnc3RhZ2dlcicpID09PSBudWxsKSB7XG5cdFx0XHR0aGlzLnN0YWdnZXIgPSBTVEFHR0VSO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFNldCBkZWZhdWx0IHZhbHVlIGZvciBlYXNpbmcgaWYgYXR0cmlidXRlXG5cdFx0ICogaGFzIG5vdCB5ZXQgYmVlbiBzZXQuXG5cdFx0ICovXG5cdFx0aWYgKHRoaXMuZ2V0QXR0cmlidXRlKCdlYXNpbmcnKSA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5lYXNpbmcgPSBFQVNJTkc7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogQ2FsY3VsYXRlIHBvc2l0aW9ucyBhbmQgc2V0dXAgdGhlIG9ic2VydmVycy5cblx0XHQgKi9cblx0XHR0aGlzLiN1cGRhdGVQb3NpdGlvbnMoKTtcblx0XHR0aGlzLiNzZXR1cE9ic2VydmVycygpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpcmVzIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGJlZW4gZGlzY29ubmVjdGVkLlxuXHQgKiBcblx0ICogQG1ldGhvZFx0ZGlzY29ubmVjdGVkQ2FsbGJhY2tcblx0ICogQHJldHVybnNcdHt2b2lkfVxuXHQgKi9cblx0ZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG5cdFx0dGhpcy4jcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcblx0fVxuXG59IiwiLyoqXG4gKiBEaXNwYXRjaGVzIHN0YXJ0IGV2ZW50IHRoYXQgZmlyZXMgYmVmb3JlIHRoZVxuICogYW5pbWF0aW9ucyBoYXZlIHN0YXJ0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBkaXNwYXRjaFRyYW5zaXRpb25HcmlkQW5pbWF0aW9uU3RhcnRFdmVudCA9IChldmVudFRhcmdldDogRXZlbnRUYXJnZXQpOiB2b2lkID0+IHtcblx0Y29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ3RyYW5zaXRpb25ncmlkYW5pbWF0aW9uc3RhcnQnKTtcblx0ZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbi8qKlxuICogRGlzcGF0Y2hlcyBlbmQgZXZlbnQgdGhhdCBmaXJlcyBhZnRlciBhbGxcbiAqIGFuaW1hdGlvbnMgaGF2ZSBmaW5pc2hlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGRpc3BhdGNoVHJhbnNpdGlvbkdyaWRBbmltYXRpb25FbmRFdmVudCA9IChldmVudFRhcmdldDogRXZlbnRUYXJnZXQpOiB2b2lkID0+IHtcblx0Y29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ3RyYW5zaXRpb25ncmlkYW5pbWF0aW9uZW5kJyk7XG5cdGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufSIsImltcG9ydCBUcmFuc2l0aW9uR3JpZEVsZW1lbnQgZnJvbSAnLi9jb21wb25lbnQnXG5cbi8qKlxuICogUmVnaXN0ZXIgdGhlIGN1c3RvbSBlbGVtZW50LlxuICovXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3RyYW5zaXRpb24tZ3JpZCcsIFRyYW5zaXRpb25HcmlkRWxlbWVudCk7Il0sInNvdXJjZVJvb3QiOiIifQ==